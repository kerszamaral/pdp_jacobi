vtune: Warning: Due to hardware limitations some of the metrics will not be available on this platform when Intel Hyper-Threading Technology is on. Consider disabling the Hyper-Threading option in the BIOS before running the analysis.
vtune: Warning: Vectorization analysis is limited for this platform. Only metrics based on binary static analysis such as vector instruction set will be available.
vtune: Warning: To profile kernel modules during the session, make sure they are available in the /lib/modules/kernel_version/ location.
vtune: Peak bandwidth measurement started.
vtune: Peak bandwidth measurement finished.
vtune: Collection started. To stop the collection, either press CTRL-C or enter from another console window: vtune -r /scratch/ikamaral/pdp_run/vtune_out/vtune_512_10000_mp_41 -command stop.
vtune: Collection stopped.
vtune: Using result path `/scratch/ikamaral/pdp_run/vtune_out/vtune_512_10000_mp_41'

vtune: Executing actions  0 %                                                  
vtune: Executing actions  0 % Finalizing results                               
vtune: Executing actions  0 % Finalizing the result                            
vtune: Executing actions  0 % Clearing the database                            
vtune: Executing actions  7 % Clearing the database                            
vtune: Executing actions  7 % Loading raw data to the database                 
vtune: Executing actions  7 % Loading 'systemcollector-497517-hype2.sc' file   
vtune: Executing actions 12 % Loading 'systemcollector-497517-hype2.sc' file   
vtune: Executing actions 12 % Loading '497537.perf' file                       
vtune: Executing actions 12 % Loading '497537.stat.perf' file                  
vtune: Executing actions 12 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Updating precomputed scalar metrics              
vtune: Executing actions 14 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Processing profile metrics and debug information 
vtune: Executing actions 19 % Setting data model parameters                    
vtune: Executing actions 19 % Resolving module symbols                         
vtune: Executing actions 19 % Resolving information for `laplace_mp'           
vtune: Warning: Cannot locate debugging information for file `/scratch/ikamaral/pdp_run/laplace_mp'.

vtune: Executing actions 19 % Resolving information for `libgomp.so.1.0.0'     
vtune: Executing actions 19 % Resolving information for `libc.so.6'            
vtune: Warning: Cannot locate debugging information for file `/usr/lib/x86_64-linux-gnu/libgomp.so.1.0.0'.

vtune: Executing actions 20 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `libc.so.6'            
vtune: Executing actions 21 % Resolving information for `vmlinux'              
vtune: Warning: Cannot locate debugging information for the Linux kernel. Source-level analysis will not be possible. Function-level analysis will be limited to kernel symbol tables. See the Enabling Linux Kernel Analysis topic in the product online help for instructions.

vtune: Executing actions 22 % Resolving information for `vmlinux'              
vtune: Executing actions 22 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving bottom user stack information          
vtune: Executing actions 23 % Resolving thread name information                
vtune: Executing actions 24 % Resolving thread name information                
vtune: Executing actions 24 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving call target names for dynamic code     
vtune: Executing actions 25 % Resolving interrupt name information             
vtune: Executing actions 26 % Resolving interrupt name information             
vtune: Executing actions 26 % Processing profile metrics and debug information 
vtune: Executing actions 27 % Processing profile metrics and debug information 
vtune: Executing actions 28 % Processing profile metrics and debug information 
vtune: Executing actions 29 % Processing profile metrics and debug information 
vtune: Executing actions 30 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Processing profile metrics and debug information 
vtune: Executing actions 31 % Preparing output tree                            
vtune: Executing actions 31 % Parsing columns in input tree                    
vtune: Executing actions 32 % Parsing columns in input tree                    
vtune: Executing actions 32 % Creating top-level columns                       
vtune: Executing actions 32 % Creating top-level rows                          
vtune: Executing actions 33 % Creating top-level rows                          
vtune: Executing actions 33 % Preparing output tree                            
vtune: Executing actions 33 % Parsing columns in input tree                    
vtune: Executing actions 33 % Creating top-level columns                       
vtune: Executing actions 34 % Creating top-level columns                       
vtune: Executing actions 34 % Creating top-level rows                          
vtune: Executing actions 35 % Creating top-level rows                          
vtune: Executing actions 35 % Setting data model parameters                    
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 35 % Precomputing frequently used data                
vtune: Executing actions 36 % Precomputing frequently used data                
vtune: Executing actions 37 % Precomputing frequently used data                
vtune: Executing actions 38 % Precomputing frequently used data                
vtune: Executing actions 39 % Precomputing frequently used data                
vtune: Executing actions 40 % Precomputing frequently used data                
vtune: Executing actions 41 % Precomputing frequently used data                
vtune: Executing actions 41 % Updating precomputed scalar metrics              
vtune: Executing actions 42 % Updating precomputed scalar metrics              
vtune: Executing actions 42 % Discarding redundant overtime data               
vtune: Executing actions 44 % Discarding redundant overtime data               
vtune: Executing actions 44 % Saving the result                                
vtune: Executing actions 46 % Saving the result                                
vtune: Executing actions 48 % Saving the result                                
vtune: Executing actions 49 % Saving the result                                
vtune: Executing actions 50 % Saving the result                                
vtune: Executing actions 50 % Generating a report                              
vtune: Executing actions 50 % Setting data model parameters                    
vtune: Executing actions 75 % Setting data model parameters                    
vtune: Executing actions 75 % Generating a report                              Elapsed Time: 2.894s
    CPI Rate: 0.989
    Average CPU Frequency: 2.596 GHz 
    Total Thread Count: 41
Effective Physical Core Utilization: 37.9% (7.586 out of 20)
 | The metric value is low, which may signal a poor physical CPU cores
 | utilization caused by:
 |     - load imbalance
 |     - threading runtime overhead
 |     - contended synchronization
 |     - thread/process underutilization
 |     - incorrect affinity that utilizes logical cores instead of physical
 |       cores
 | Explore sub-metrics to estimate the efficiency of MPI and OpenMP parallelism
 | or run the Locks and Waits analysis to identify parallel bottlenecks for
 | other parallel runtimes.
 |
    Effective Logical Core Utilization: 35.0% (14.000 out of 40)
     | The metric value is low, which may signal a poor logical CPU cores
     | utilization. Consider improving physical core utilization as the first
     | step and then look at opportunities to utilize logical cores, which in
     | some cases can improve processor throughput and overall performance of
     | multi-threaded applications.
     |
Memory Bound: 27.8% of Pipeline Slots
 | The metric value is high. This can indicate that the significant fraction of
 | execution pipeline slots could be stalled due to demand memory load and
 | stores. Use Memory Access analysis to have the metric breakdown by memory
 | hierarchy, memory bandwidth information, correlation by memory objects.
 |
    Cache Bound: 20.3% of Clockticks
     | A significant proportion of cycles are being spent on data fetches from
     | caches. Check Memory Access analysis to see if accesses to L2 or L3
     | caches are problematic and consider applying the same performance tuning
     | as you would for a cache-missing workload. This may include reducing the
     | data working set size, improving data access locality, blocking or
     | partitioning the working set to fit in the lower cache levels, or
     | exploiting hardware prefetchers. Consider using software prefetchers, but
     | note that they can interfere with normal loads, increase latency, and
     | increase pressure on the memory system. This metric includes coherence
     | penalties for shared data. Check Microarchitecture Exploration analysis
     | to see if contested accesses or data sharing are indicated as likely
     | issues.
     |
    DRAM Bound: N/A with HT on
        DRAM Bandwidth Bound: 0.0% of Elapsed Time
    NUMA: % of Remote Accesses: 0.0%

    Bandwidth Utilization
    Bandwidth Domain             Platform Maximum  Observed Maximum  Average  % of Elapsed Time with High BW Utilization(%)
    ---------------------------  ----------------  ----------------  -------  ---------------------------------------------
    DRAM, GB/sec                 118                          5.200    2.861                                           0.0%
    DRAM Single-Package, GB/sec  59                           3.100    1.907                                           0.0%
Collection and Platform Info
    Application Command Line: ./laplace_mp "512" "10000" 
    Operating System: 6.1.0-28-amd64 12.10
    Computer Name: hype2
    Result Size: 16.9 MB 
    Collection start time: 20:25:01 04/04/2025 UTC
    Collection stop time: 20:25:04 04/04/2025 UTC
    Collector Type: Driverless Perf per-process sampling
    CPU
        Name: Intel(R) Xeon(R) E5/E7 v3 Processor code named Haswell
        Frequency: 2.295 GHz 
        Logical CPU Count: 40
        Max DRAM Single-Package Bandwidth: 59.000 GB/s

If you want to skip descriptions of detected performance issues in the report,
enter: vtune -report summary -report-knob show-issues=false -r <my_result_dir>.
Alternatively, you may view the report in the csv format: vtune -report
<report_name> -format=csv.

vtune: Executing actions 100 % Generating a report                             
vtune: Executing actions 100 % done                                            
